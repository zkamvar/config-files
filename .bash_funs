# Copy the bibtex entry for a given DOI
#
# example: 
# $ doi 10.7717/peerj.4152
function doi(){ curl -LH "Accept: text/bibliography; style=bibtex" "http://doi.org/$1" \
| sed -r -e 's/([^A-Za-z]), /\1,\n/g'                                                  \
| (xclip -selection clipboard 2> /dev/null || pbcopy); }
export -f doi

# shruggie
# Source: https://twitter.com/climagic/status/672862397015658496
function shrug(){ echo -n "¯\_(ツ)_/¯"    \
| (xclip -selection clipboard 2> /dev/null || pbcopy); echo "¯\_(ツ)_/¯ copied to your clipboard"; }
export -f shrug

# strollie
function stroll(){ echo -n "ᕕ( ᐛ )ᕗ"      \
| (xclip -selection clipboard 2> /dev/null || pbcopy); echo "ᕕ( ᐛ )ᕗ copied to your clipboard"; }
export -f stroll

# flippy
function flip(){ echo -n "(╯°□°）╯︵ ┻━┻" \
| (xclip -selection clipboard 2> /dev/null || pbcopy); echo "(╯°□°）╯︵ ┻━┻ copied to your clipboard"; }
export -f flip

# clone high reference
function jkl { echo -n "(屮ﾟДﾟ)屮"        \
| (xclip -selection clipboard 2> /dev/null || pbcopy); echo "(屮ﾟДﾟ)屮 copied to your clipboard"; }
export -f jkl

# ಠ_ಠ
function concern { echo -n "ಠ_ಠ"          \
| (xclip -selection clipboard 2> /dev/null || pbcopy); echo "ಠ_ಠ copied to your clipboard"; }
export -f concern

# quick way to view csv files
function csv { column -s, -t < "$1" | less -#2 -N -S; }
export -f csv

# template for a notes repository
function getnotes { curl -L https://api.github.com/repos/zkamvar/notes-template/tarball \
| tar --strip-components=1 -xzv \
--exclude=README.md \
--exclude=LICENSE \
--exclude=flow.png \
--exclude=.gitignore; }
export -f getnotes

# set theme
function theme() { 
  kitty @ --to=$KITTY_LISTEN_ON kitten themes --dump-theme ${1} > ~/.config/kitty/current-theme.conf
  kitty @ --to=$KITTY_LISTEN_ON set-colors --all ~/.config/kitty/current-theme.conf
}
export -f theme

function black_cat () {
  local bg=$( kitty @ --to=$KITTY_LISTEN_ON get-colors | grep '^background' | awk '{print $2}' )
  echo "$( luminance ${bg} ) > 0.228" | bc -l
}
export -f black_cat

# https://stackoverflow.com/a/56678483/2752888
function luminance () {
  local hex="${1/\#/}" # remove leading hash
  local r=$( sRGBtoLIN ${hex:0:2} )
  local g=$( sRGBtoLIN ${hex:2:2} )
  local b=$( sRGBtoLIN ${hex:4:2} )
  echo "${r} * 0.2126 + ${g} * 0.7152 + ${b} * 0.0722" | bc -l
}
export -f luminance


function sRGBtoLIN () {
  # convert hex to decimal
  local in=$((16#${1}))
  # convert to fraction
  local v=$( echo "${in}/255" | bc -l )
  # linearize based on perception threshold.
  if [ $( echo "${v} < 0.04045" | bc -l ) -eq 1 ]; then
     v=$(echo "${v}/12.92" | bc -l)
  else
     # bc gives a weird warning of "non-zero scale in exponent" when trying to
     # parse a decimal or negative exponent. The solution is:
     #
     # e(l(2) * 2.5) == 2^2.5
     #
     # I would link the page I got it from but yeesh, there was a banner that
     # was espousing conspiracy theories
     v=$( echo "e(l((${v} + 0.055)/1.055) * 2.4)" | bc -l )
  fi
  echo "$v"
}
export -f sRGBtoLIN

function vpn () {

  switch="${1:-none}"
  con="${2:-Seattle}"

  # cli switching on of VPN: https://askubuntu.com/a/57409/853075
  # disabling ipv6 on linux: https://support.vyprvpn.com/hc/en-us/articles/360038553552-How-do-I-disable-IPv6-on-Linux-
  case "${switch}" in 

    "on")
      echo "switching on"
      sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1 \
      && sudo sysctl -w net.ipv6.conf.default.disable_ipv6=1 \
      && sudo sysctl -w net.ipv6.conf.lo.disable_ipv6=1
      nmcli con up id "${con}"
      ;;

    "off")
      con=$(nmcli con show --active | grep vpn | awk -F' ' '{print $1}')
      sudo sysctl -w net.ipv6.conf.all.disable_ipv6=0 \
      && sudo sysctl -w net.ipv6.conf.default.disable_ipv6=0 \
      && sudo sysctl -w net.ipv6.conf.lo.disable_ipv6=0
      if [ -z "${con}" ]
      then
        echo "not conntected to vpn"
        return 0
      else
        echo "switching off ${con}"
        nmcli con down id "${con}"
      fi
      ;;

    *)
      echo "unused: ${switch}"
      ;;
  esac
}
export -f vpn
